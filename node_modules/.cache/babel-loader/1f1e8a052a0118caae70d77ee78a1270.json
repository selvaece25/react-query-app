{"ast":null,"code":"import React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar statusIdle = 'idle';\nvar statusLoading = 'loading';\nvar statusError = 'error';\nvar statusSuccess = 'success';\nvar _uid = 0;\n\nvar uid = function uid() {\n  return _uid++;\n};\n\nvar cancelledError = {};\nvar isServer = typeof window === 'undefined';\n\nvar noop = function noop() {};\n\nvar identity = function identity(d) {\n  return d;\n};\n\nvar Console = console || {\n  error: noop,\n  warn: noop,\n  log: noop\n};\n\nfunction useUid() {\n  var ref = React.useRef(null);\n\n  if (ref.current === null) {\n    ref.current = uid();\n  }\n\n  return ref.current;\n}\n\nfunction setConsole(c) {\n  Console = c;\n}\n\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n}\n\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\n\nfunction stableStringifyReplacer(_, value) {\n  return isObject(value) ? Object.assign.apply(Object, [{}].concat(Object.keys(value).sort().map(function (key) {\n    var _ref;\n\n    return _ref = {}, _ref[key] = value[key], _ref;\n  }))) : value;\n}\n\nfunction stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer);\n}\n\nfunction isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a);\n}\n\nfunction deepIncludes(a, b) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(function (key) {\n      return !deepIncludes(a[key], b[key]);\n    });\n  }\n\n  return a === b;\n}\n\nfunction isDocumentVisible() {\n  return typeof document === 'undefined' || document.visibilityState === undefined || document.visibilityState === 'visible' || document.visibilityState === 'prerender';\n}\n\nfunction isOnline() {\n  return navigator.onLine === undefined || navigator.onLine;\n}\n\nfunction getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (args[0].hasOwnProperty('queryKey') && args[0].hasOwnProperty('queryFn')) {\n      var _args$ = args[0],\n          _queryKey = _args$.queryKey,\n          _args$$variables = _args$.variables,\n          variables = _args$$variables === void 0 ? [] : _args$$variables,\n          _queryFn = _args$.queryFn,\n          _args$$config = _args$.config,\n          _config = _args$$config === void 0 ? {} : _args$$config;\n\n      return [_queryKey, variables, _queryFn, _config];\n    } else {\n      throw new Error('queryKey and queryFn keys are required.');\n    }\n  }\n\n  if (typeof args[2] === 'function') {\n    var _queryKey2 = args[0],\n        _args$2 = args[1],\n        _variables = _args$2 === void 0 ? [] : _args$2,\n        _queryFn2 = args[2],\n        _args$3 = args[3],\n        _config2 = _args$3 === void 0 ? {} : _args$3;\n\n    return [_queryKey2, _variables, _queryFn2, _config2];\n  }\n\n  var queryKey = args[0],\n      queryFn = args[1],\n      _args$4 = args[2],\n      config = _args$4 === void 0 ? {} : _args$4;\n  return [queryKey, [], queryFn, config];\n}\n\nfunction useMountedCallback(callback) {\n  var mounted = React.useRef(false);\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](function () {\n    mounted.current = true;\n    return function () {\n      return mounted.current = false;\n    };\n  }, []);\n  return React.useCallback(function () {\n    return mounted.current ? callback.apply(void 0, arguments) : void 0;\n  }, [callback]);\n}\n\nfunction handleSuspense(query) {\n  if (query.config.suspense || query.config.useErrorBoundary) {\n    if (query.status === statusError) {\n      throw query.error;\n    }\n  }\n\n  if (query.config.suspense) {\n    if (query.status === statusLoading) {\n      query.wasSuspensed = true;\n      throw query.refetch();\n    }\n  }\n}\n\nvar configContext = React.createContext();\nvar defaultConfigRef = {\n  current: {\n    retry: 3,\n    retryDelay: function retryDelay(attemptIndex) {\n      return Math.min(1000 * Math.pow(2, attemptIndex), 30000);\n    },\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchAllOnWindowFocus: true,\n    refetchInterval: false,\n    suspense: false,\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    queryFnParamsFilter: identity,\n    throwOnError: false,\n    useErrorBoundary: undefined,\n    // this will default to the suspense value\n    onMutate: noop,\n    onSuccess: noop,\n    onError: noop,\n    onSettled: noop,\n    refetchOnMount: true\n  }\n};\n\nfunction useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current;\n}\n\nfunction ReactQueryConfigProvider(_ref) {\n  var config = _ref.config,\n      children = _ref.children;\n  var configContextValue = React.useContext(configContext);\n  var newConfig = React.useMemo(function () {\n    var newConfig = _extends({}, configContextValue || defaultConfigRef.current, {}, config); // Default useErrorBoundary to the suspense value\n\n\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense;\n    }\n\n    return newConfig;\n  }, [config, configContextValue]);\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig;\n  }\n\n  return React.createElement(configContext.Provider, {\n    value: newConfig\n  }, children);\n}\n\nfunction defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return [];\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey());\n    } catch (_unused) {\n      return [];\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey];\n  }\n\n  var queryHash = stableStringify(queryKey);\n  queryKey = JSON.parse(queryHash);\n  return [queryHash, queryKey];\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _invoke(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar queryCache = makeQueryCache();\nvar actionInit = {};\nvar actionFailed = {};\nvar actionMarkStale = {};\nvar actionMarkGC = {};\nvar actionFetch = {};\nvar actionSuccess = {};\nvar actionError = {};\n\nfunction makeQueryCache() {\n  var listeners = [];\n  var cache = {\n    queries: {},\n    isFetching: 0\n  };\n\n  var notifyGlobalListeners = function notifyGlobalListeners() {\n    cache.isFetching = Object.values(queryCache.queries).reduce(function (acc, query) {\n      return query.state.isFetching ? acc + 1 : acc;\n    }, 0);\n    listeners.forEach(function (d) {\n      return d(cache);\n    });\n  };\n\n  cache.subscribe = function (cb) {\n    listeners.push(cb);\n    return function () {\n      listeners.splice(listeners.indexOf(cb), 1);\n    };\n  };\n\n  cache.clear = function () {\n    cache.queries = {};\n    notifyGlobalListeners();\n  };\n\n  var findQueries = function findQueries(predicate, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        exact = _ref.exact;\n\n    if (typeof predicate !== 'function') {\n      var _defaultConfigRef$cur = defaultConfigRef.current.queryKeySerializerFn(predicate),\n          queryHash = _defaultConfigRef$cur[0],\n          queryKey = _defaultConfigRef$cur[1];\n\n      predicate = function predicate(d) {\n        return exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey);\n      };\n    }\n\n    return Object.values(cache.queries).filter(predicate);\n  };\n\n  cache.getQueries = findQueries;\n\n  cache.getQuery = function (queryKey) {\n    return findQueries(queryKey, {\n      exact: true\n    })[0];\n  };\n\n  cache.getQueryData = function (queryKey) {\n    var _cache$getQuery;\n\n    return (_cache$getQuery = cache.getQuery(queryKey)) == null ? void 0 : _cache$getQuery.state.data;\n  };\n\n  cache.removeQueries = function (predicate, _temp2) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        exact = _ref2.exact;\n\n    var foundQueries = findQueries(predicate, {\n      exact: exact\n    });\n    foundQueries.forEach(function (query) {\n      clearTimeout(query.staleTimeout);\n      delete cache.queries[query.queryHash];\n    });\n\n    if (foundQueries.length) {\n      notifyGlobalListeners();\n    }\n  };\n\n  cache.refetchQueries = _async(function (predicate, _temp3) {\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\n        exact = _ref3.exact,\n        throwOnError = _ref3.throwOnError,\n        force = _ref3.force;\n\n    var foundQueries = predicate === true ? Object.values(cache.queries) : findQueries(predicate, {\n      exact: exact\n    });\n    return _catch(function () {\n      return _await(Promise.all(foundQueries.map(function (query) {\n        return query.fetch({\n          force: force\n        });\n      })));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  });\n\n  cache._buildQuery = function (userQueryKey, queryVariables, queryFn, config) {\n    var _config$queryKeySeria = config.queryKeySerializerFn(userQueryKey),\n        queryHash = _config$queryKeySeria[0],\n        queryKey = _config$queryKeySeria[1];\n\n    var query = cache.queries[queryHash];\n\n    if (query) {\n      Object.assign(query, {\n        queryVariables: queryVariables,\n        queryFn: queryFn\n      });\n      Object.assign(query.config, config);\n    } else {\n      query = makeQuery({\n        queryKey: queryKey,\n        queryHash: queryHash,\n        queryVariables: queryVariables,\n        queryFn: queryFn,\n        config: config\n      }); // If the query started with data, schedule\n      // a stale timeout\n\n      if (query.state.data) {\n        query.scheduleStaleTimeout(); // Simulate a query healing process\n\n        query.heal(); // Schedule for garbage collection in case\n        // nothing subscribes to this query\n\n        query.scheduleGarbageCollection();\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query; // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n\n          setTimeout(function () {\n            notifyGlobalListeners();\n          });\n        }\n      }\n    }\n\n    return query;\n  };\n\n  cache.prefetchQuery = _async(function () {\n    var _exit = false;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _getQueryArgs = getQueryArgs(args),\n        queryKey = _getQueryArgs[0],\n        queryVariables = _getQueryArgs[1],\n        queryFn = _getQueryArgs[2],\n        _getQueryArgs$ = _getQueryArgs[3],\n        force = _getQueryArgs$.force,\n        config = _objectWithoutPropertiesLoose(_getQueryArgs$, [\"force\"]);\n\n    config = _extends({}, defaultConfigRef.current, {}, config);\n\n    var query = cache._buildQuery(queryKey, queryVariables, queryFn, config); // Don't prefetch queries that are fresh, unless force is passed\n\n\n    return _invoke(function () {\n      if (query.state.isStale || force) {\n        // Trigger a fetch and return the promise\n        return _catch(function () {\n          return _await(query.fetch({\n            force: force\n          }), function (res) {\n            query.wasPrefetched = true;\n            _exit = true;\n            return res;\n          });\n        }, function (err) {\n          if (config.throwOnError) {\n            throw err;\n          }\n        });\n      }\n    }, function (_result3) {\n      return _exit ? _result3 : query.state.data;\n    });\n  });\n\n  cache.setQueryData = function (queryKey, updater, _ref4) {\n    if (_ref4 === void 0) {\n      _ref4 = {};\n    }\n\n    var _ref5 = _ref4,\n        exact = _ref5.exact,\n        config = _objectWithoutPropertiesLoose(_ref5, [\"exact\"]);\n\n    var queries = findQueries(queryKey, {\n      exact: exact\n    });\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [cache._buildQuery(queryKey, undefined, function () {\n        return new Promise(noop);\n      }, _extends({}, defaultConfigRef.current, {}, config))];\n    }\n\n    queries.forEach(function (d) {\n      return d.setData(updater);\n    });\n  };\n\n  function makeQuery(options) {\n    var reducer = options.config.queryReducer || defaultQueryReducer;\n    var noQueryHash = typeof options.queryHash === 'undefined';\n    var initialData = typeof options.config.initialData === 'function' ? options.config.initialData() : options.config.initialData;\n    var hasInitialData = typeof initialData !== 'undefined';\n    var isStale = noQueryHash ? true : !hasInitialData;\n    var manual = options.config.manual;\n    var initialStatus = noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading;\n\n    var query = _extends({}, options, {\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus: initialStatus,\n        initialData: initialData,\n        hasInitialData: hasInitialData,\n        isStale: isStale,\n        manual: manual\n      })\n    });\n\n    var dispatch = function dispatch(action) {\n      query.state = reducer(query.state, action);\n      query.instances.forEach(function (d) {\n        return d.onStateUpdate(query.state);\n      });\n      notifyGlobalListeners();\n    };\n\n    query.scheduleStaleTimeout = function () {\n      if (query.config.staleTime === Infinity) {\n        return;\n      }\n\n      query.staleTimeout = setTimeout(function () {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({\n            type: actionMarkStale\n          });\n        }\n      }, query.config.staleTime);\n    };\n\n    query.scheduleGarbageCollection = function () {\n      dispatch({\n        type: actionMarkGC\n      });\n      query.cacheTimeout = setTimeout(function () {\n        cache.removeQueries(function (d) {\n          return d.state.markedForGarbageCollection && d.queryHash === query.queryHash;\n        });\n      }, typeof query.state.data === 'undefined' && query.state.status !== 'error' ? 0 : query.config.cacheTime);\n    };\n\n    query.heal = function () {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout); // Mark the query as not cancelled\n\n      query.cancelled = null;\n    };\n\n    query.subscribe = function (instance) {\n      var found = query.instances.find(function (d) {\n        return d.id === instance.id;\n      });\n\n      if (found) {\n        Object.assign(found, instance);\n      } else {\n        found = _extends({\n          onStateUpdate: noop\n        }, instance);\n        query.instances.push(instance);\n      }\n\n      query.heal(); // Return the unsubscribe function\n\n      return function () {\n        query.instances = query.instances.filter(function (d) {\n          return d.id !== instance.id;\n        });\n\n        if (!query.instances.length) {\n          // Cancel any side-effects\n          query.cancelled = cancelledError;\n\n          if (query.cancelQueries) {\n            query.cancelQueries();\n          } // Schedule garbage collection\n\n\n          query.scheduleGarbageCollection();\n        }\n      };\n    }; // Set up the fetch function\n\n\n    var tryFetchData = _async(function (queryFn) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return _catch(function () {\n        // Perform the query\n        var promise = queryFn.apply(void 0, query.config.queryFnParamsFilter(args));\n\n        query.cancelQueries = function () {\n          return promise.cancel == null ? void 0 : promise.cancel();\n        };\n\n        return _await(promise, function (data) {\n          delete query.cancelQueries;\n          if (query.cancelled) throw query.cancelled;\n          return data;\n        });\n      }, function (error) {\n        var _exit2 = false;\n        delete query.cancelQueries;\n        if (query.cancelled) throw query.cancelled; // If we fail, increase the failureCount\n\n        dispatch({\n          type: actionFailed\n        }); // Do we need to retry the request?\n\n        return _invoke(function () {\n          if (query.config.retry === true || query.state.failureCount <= query.config.retry || typeof query.config.retry === 'function' && query.config.retry(query.state.failureCount, error)) {\n            // Only retry if the document is visible\n            if (!isDocumentVisible()) {\n              // set this flag to continue fetch retries on focus\n              query.shouldContinueRetryOnFocus = true;\n              _exit2 = true;\n              return new Promise(noop);\n            }\n\n            delete query.shouldContinueRetryOnFocus; // Determine the retryDelay\n\n            var delay = functionalUpdate(query.config.retryDelay, query.state.failureCount); // Return a new promise with the retry\n\n            _exit2 = true;\n            return _await(new Promise(function (resolve, reject) {\n              // Keep track of the retry timeout\n              setTimeout(_async(function () {\n                return query.cancelled ? reject(query.cancelled) : _catch(function () {\n                  return _await(tryFetchData.apply(void 0, [queryFn].concat(args)), function (data) {\n                    if (query.cancelled) return reject(query.cancelled);\n                    resolve(data);\n                  });\n                }, function (error) {\n                  if (query.cancelled) return reject(query.cancelled);\n                  reject(error);\n                });\n              }), delay);\n            }));\n          }\n        }, function (_result4) {\n          if (_exit2) return _result4;\n          throw error;\n        });\n      });\n    });\n\n    query.fetch = _async(function (_temp5) {\n      var _ref6 = _temp5 === void 0 ? {} : _temp5,\n          force = _ref6.force,\n          _ref6$__queryFn = _ref6.__queryFn,\n          __queryFn = _ref6$__queryFn === void 0 ? query.queryFn : _ref6$__queryFn; // Don't refetch fresh queries that don't have a queryHash\n\n\n      if (!query.queryHash || !query.state.isStale && !force) {\n        return;\n      } // Create a new promise for the query cache if necessary\n\n\n      if (!query.promise) {\n        query.promise = _async(function () {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null;\n          return _catch(function () {\n            // Set up the query refreshing state\n            dispatch({\n              type: actionFetch\n            }); // Try to fetch\n\n            return _await(tryFetchData.apply(void 0, [__queryFn].concat(query.queryKey, query.queryVariables)), function (data) {\n              query.setData(data);\n              query.instances.forEach(function (instance) {\n                return instance.onSuccess && instance.onSuccess(query.state.data);\n              });\n              query.instances.forEach(function (instance) {\n                return instance.onSettled && instance.onSettled(query.state.data, null);\n              });\n              delete query.promise;\n              return data;\n            });\n          }, function (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error: error\n            });\n            delete query.promise;\n\n            if (error !== query.cancelled) {\n              query.instances.forEach(function (instance) {\n                return instance.onError && instance.onError(error);\n              });\n              query.instances.forEach(function (instance) {\n                return instance.onSettled && instance.onSettled(undefined, error);\n              });\n              throw error;\n            }\n          });\n        })();\n      }\n\n      return query.promise;\n    });\n\n    query.setData = function (updater) {\n      // Set data and mark it as cached\n      dispatch({\n        type: actionSuccess,\n        updater: updater\n      }); // Schedule a fresh invalidation!\n\n      clearTimeout(query.staleTimeout);\n      query.scheduleStaleTimeout();\n    };\n\n    return query;\n  }\n\n  return cache;\n}\n\nfunction defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.hasInitialData ? false : !action.manual,\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0\n      };\n\n    case actionFailed:\n      return _extends({}, state, {\n        failureCount: state.failureCount + 1\n      });\n\n    case actionMarkStale:\n      return _extends({}, state, {\n        isStale: true\n      });\n\n    case actionMarkGC:\n      {\n        return _extends({}, state, {\n          markedForGarbageCollection: true\n        });\n      }\n\n    case actionFetch:\n      return _extends({}, state, {\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0\n      });\n\n    case actionSuccess:\n      return _extends({}, state, {\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0\n      });\n\n    case actionError:\n      return _extends({}, state, {\n        isFetching: false,\n        isStale: true\n      }, !action.cancelled && {\n        status: statusError,\n        error: action.error\n      });\n\n    default:\n      throw new Error();\n  }\n}\n\nvar visibilityChangeEvent = 'visibilitychange';\nvar focusEvent = 'focus';\n\nvar onWindowFocus = function onWindowFocus() {\n  var refetchAllOnWindowFocus = defaultConfigRef.current.refetchAllOnWindowFocus;\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCache.refetchQueries(function (query) {\n      if (!query.instances.length) {\n        return false;\n      }\n\n      if (query.config.manual === true) {\n        return false;\n      }\n\n      if (query.shouldContinueRetryOnFocus) {\n        // delete promise, so `fetch` will create new one\n        delete query.promise;\n        return true;\n      }\n\n      if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n        return refetchAllOnWindowFocus;\n      } else {\n        return query.config.refetchOnWindowFocus;\n      }\n    }).catch(Console.error);\n  }\n};\n\nvar removePreviousHandler;\n\nfunction setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler();\n  } // Sub the new watcher\n\n\n  removePreviousHandler = callback(onWindowFocus);\n}\n\nsetFocusHandler(function (handleFocus) {\n  var _window; // Listen to visibillitychange and focus\n\n\n  if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false);\n    window.addEventListener(focusEvent, handleFocus, false);\n    return function () {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus);\n      window.removeEventListener(focusEvent, handleFocus);\n    };\n  }\n});\n\nfunction useIsFetching() {\n  var _React$useState = React.useState({}),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  React.useEffect(function () {\n    return queryCache.subscribe(function () {\n      return setState({});\n    });\n  }, []);\n  return React.useMemo(function () {\n    return state && queryCache.isFetching;\n  }, [state]);\n}\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nvar getDefaultState = function getDefaultState() {\n  return {\n    status: statusIdle,\n    data: undefined,\n    error: null\n  };\n};\n\nfunction _empty() {}\n\nvar actionReset = {};\n\nfunction _awaitIgnored(value, direct) {\n  if (!direct) {\n    return value && value.then ? value.then(_empty) : Promise.resolve();\n  }\n}\n\nvar actionLoading = {};\n\nfunction _invoke$1(body, then) {\n  var result = body();\n\n  if (result && result.then) {\n    return result.then(then);\n  }\n\n  return then(result);\n}\n\nvar actionResolve = {};\n\nfunction _catch$1(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar actionReject = {};\n\nfunction _async$1(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState();\n  }\n\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading\n    };\n  }\n\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data\n    };\n  }\n\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error\n    };\n  }\n\n  throw new Error();\n}\n\nfunction useMutation(mutationFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var _React$useReducer = React.useReducer(mutationReducer, null, getDefaultState),\n      state = _React$useReducer[0],\n      unsafeDispatch = _React$useReducer[1];\n\n  var dispatch = useMountedCallback(unsafeDispatch);\n  var getMutationFn = useGetLatest(mutationFn);\n  var getConfig = useGetLatest(_extends({}, useConfigContext(), {}, config));\n  var latestMutationRef = React.useRef();\n  var mutate = React.useCallback(_async$1(function (variables, _temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$onSuccess = _ref.onSuccess,\n        onSuccess = _ref$onSuccess === void 0 ? noop : _ref$onSuccess,\n        _ref$onError = _ref.onError,\n        onError = _ref$onError === void 0 ? noop : _ref$onError,\n        _ref$onSettled = _ref.onSettled,\n        onSettled = _ref$onSettled === void 0 ? noop : _ref$onSettled,\n        throwOnError = _ref.throwOnError;\n\n    var config = getConfig();\n    var mutationId = uid();\n    latestMutationRef.current = mutationId;\n\n    var isLatest = _async$1(function () {\n      return latestMutationRef.current === mutationId;\n    });\n\n    dispatch({\n      type: actionLoading\n    });\n    var snapshotValue;\n    return _catch$1(function () {\n      return _await$1(config.onMutate(variables), function (_config$onMutate) {\n        snapshotValue = _config$onMutate;\n        var data;\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _await$1(getMutationFn()(variables), function (_getMutationFn) {\n              data = _getMutationFn;\n            });\n          }\n        }, function () {\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored(onSuccess(data, variables));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored(config.onSuccess(data, variables));\n              }\n            }, function () {\n              return _invoke$1(function () {\n                if (isLatest()) {\n                  return _awaitIgnored(onSettled(data, null, variables));\n                }\n              }, function () {\n                return _invoke$1(function () {\n                  if (isLatest()) {\n                    return _awaitIgnored(config.onSettled(data, null, variables));\n                  }\n                }, function () {\n                  if (isLatest()) {\n                    dispatch({\n                      type: actionResolve,\n                      data: data\n                    });\n                  }\n\n                  return data;\n                });\n              });\n            });\n          });\n        });\n      });\n    }, function (error) {\n      return _invoke$1(function () {\n        if (isLatest()) {\n          Console.error(error);\n          return _awaitIgnored(onError(error, variables, snapshotValue));\n        }\n      }, function () {\n        return _invoke$1(function () {\n          if (isLatest()) {\n            return _awaitIgnored(config.onError(error, variables, snapshotValue));\n          }\n        }, function () {\n          return _invoke$1(function () {\n            if (isLatest()) {\n              return _awaitIgnored(onSettled(undefined, error, variables, snapshotValue));\n            }\n          }, function () {\n            return _invoke$1(function () {\n              if (isLatest()) {\n                return _awaitIgnored(config.onSettled(undefined, error, variables, snapshotValue));\n              }\n            }, function () {\n              if (isLatest()) {\n                dispatch({\n                  type: actionReject,\n                  error: error\n                });\n\n                if (throwOnError != null ? throwOnError : config.throwOnError) {\n                  throw error;\n                }\n              }\n            });\n          });\n        });\n      });\n    });\n  }), [dispatch, getConfig, getMutationFn]);\n  var reset = React.useCallback(function () {\n    return dispatch({\n      type: actionReset\n    });\n  }, [dispatch]);\n  React.useEffect(function () {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error;\n    }\n  }, [getConfig, state.error]);\n  return [mutate, _extends({}, state, {\n    reset: reset\n  })];\n}\n\nfunction _await$2(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _catch$2(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nfunction _async$2(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction useBaseQuery(queryKey, queryVariables, queryFn, config) {\n  if (config === void 0) {\n    config = {};\n  }\n\n  var instanceId = useUid();\n  config = _extends({}, useConfigContext(), {}, config);\n  var queryRef = React.useRef();\n\n  var newQuery = queryCache._buildQuery(queryKey, queryVariables, queryFn, config);\n\n  var useCachedQuery = queryRef.current && typeof queryRef.current.queryHash === 'undefined' && typeof newQuery.queryHash === 'undefined'; // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n\n  if (!useCachedQuery) {\n    queryRef.current = newQuery;\n  }\n\n  var query = queryRef.current;\n\n  var _React$useState = React.useState(),\n      unsafeRerender = _React$useState[1];\n\n  var rerender = useMountedCallback(unsafeRerender);\n  var getLatestConfig = useGetLatest(config);\n  var refetch = React.useCallback(_async$2(function (_ref) {\n    if (_ref === void 0) {\n      _ref = {};\n    }\n\n    var _ref2 = _ref,\n        throwOnError = _ref2.throwOnError,\n        rest = _objectWithoutPropertiesLoose(_ref2, [\"throwOnError\"]);\n\n    return _catch$2(function () {\n      return _await$2(query.fetch(rest));\n    }, function (err) {\n      if (throwOnError) {\n        throw err;\n      }\n    });\n  }), [query]); // Subscribe to the query and maybe trigger fetch\n\n  React.useEffect(function () {\n    var unsubscribeFromQuery = query.subscribe({\n      id: instanceId,\n      onStateUpdate: function onStateUpdate() {\n        return rerender({});\n      },\n      onSuccess: function onSuccess(data) {\n        return getLatestConfig().onSuccess(data);\n      },\n      onError: function onError(err) {\n        return getLatestConfig().onError(err);\n      },\n      onSettled: function onSettled(data, err) {\n        return getLatestConfig().onSettled(data, err);\n      }\n    }); // Perform the initial fetch for this query if necessary\n\n    if (!getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n    !query.wasPrefetched && // Don't double fetch for prefetched queries\n    !query.wasSuspensed && // Don't double fetch for suspense\n    query.state.isStale && ( // Only refetch if stale\n    getLatestConfig().refetchOnMount || query.instances.length === 1)) {\n      refetch().catch(Console.error);\n    }\n\n    query.wasPrefetched = false;\n    query.wasSuspensed = false;\n    return unsubscribeFromQuery;\n  }, [getLatestConfig, instanceId, query, refetch, rerender]); // Handle refetch interval\n\n  React.useEffect(function () {\n    if (config.refetchInterval && (!query.refetchInterval || config.refetchInterval < query.refetchInterval)) {\n      clearInterval(query.refetchInterval);\n      query.refetchInterval = setInterval(function () {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error);\n        }\n      }, config.refetchInterval);\n      return function () {\n        clearInterval(query.refetchInterval);\n        delete query.refetchInterval;\n      };\n    }\n  }, [config.refetchInterval, config.refetchIntervalInBackground, query.refetchInterval, refetch]);\n  return _extends({}, query.state, {\n    config: config,\n    query: query,\n    refetch: refetch\n  });\n}\n\nfunction useQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var query = useBaseQuery.apply(void 0, getQueryArgs(args));\n  handleSuspense(query);\n  return query;\n}\n\nfunction usePaginatedQuery() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryVariables = _getQueryArgs[1],\n      queryFn = _getQueryArgs[2],\n      _getQueryArgs$ = _getQueryArgs[3],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var lastDataRef = React.useRef(); // If latestData is set, don't use initialData\n\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData;\n  }\n\n  var query = useBaseQuery(queryKey, queryVariables, queryFn, config);\n  var latestData = query.data,\n      status = query.status;\n  React.useEffect(function () {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData;\n    }\n  }, [latestData, status]);\n  var resolvedData = latestData;\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current;\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success';\n  }\n\n  handleSuspense(query);\n  return _extends({}, query, {\n    resolvedData: resolvedData,\n    latestData: latestData,\n    status: status\n  });\n}\n\nfunction _await$3(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction _async$3(f) {\n  return function () {\n    for (var args = [], i = 0; i < arguments.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    try {\n      return Promise.resolve(f.apply(this, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\n\nfunction _rethrow(thrown, value) {\n  if (thrown) throw value;\n  return value;\n}\n\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n\n  return finalizer(false, result);\n}\n\nfunction useInfiniteQuery() {\n  var queryInfoRef = React.useRef();\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var _getQueryArgs = getQueryArgs(args),\n      queryKey = _getQueryArgs[0],\n      queryVariables = _getQueryArgs[1],\n      queryFn = _getQueryArgs[2],\n      _getQueryArgs$ = _getQueryArgs[3],\n      config = _getQueryArgs$ === void 0 ? {} : _getQueryArgs$;\n\n  var getFetchMore = config.getFetchMore;\n  var getGetFetchMore = useGetLatest(getFetchMore); // The default queryFn will query all pages and map them together\n\n  var originalQueryFn = queryFn;\n  queryFn = _async$3(function () {\n    return _await$3(Promise.all(queryInfoRef.current.query.pageVariables.map(function (args) {\n      return originalQueryFn.apply(void 0, args);\n    })), function (data) {\n      queryInfoRef.current.query.canFetchMore = getGetFetchMore()(data[data.length - 1], data);\n      return data;\n    });\n  });\n  var queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config);\n\n  if (typeof queryInfo.query.canFetchMore === 'undefined' && typeof queryInfo.data !== 'undefined') {\n    queryInfo.query.canFetchMore = getGetFetchMore()(queryInfo.data[queryInfo.data.length - 1], queryInfo.data);\n  }\n\n  queryInfoRef.current = queryInfo;\n  var refetch = queryInfo.refetch,\n      _queryInfo$data = queryInfo.data,\n      data = _queryInfo$data === void 0 ? [] : _queryInfo$data,\n      canFetchMore = queryInfo.query.canFetchMore; // Here we seed the pageVariabes for the query\n\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [[].concat(queryInfo.query.queryKey, queryInfo.query.queryVariables)];\n  }\n\n  var fetchMore = React.useCallback(function (fetchMoreInfo) {\n    if (fetchMoreInfo === void 0) {\n      fetchMoreInfo = queryInfoRef.current.query.canFetchMore;\n    }\n\n    return queryInfoRef.current.query.canFetchMore ? refetch({\n      force: true,\n      __queryFn: _async$3(function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return _finallyRethrows(function () {\n          queryInfoRef.current.query.isFetchingMore = true;\n          var newArgs = [].concat(args, [fetchMoreInfo]);\n          queryInfoRef.current.query.pageVariables.push(newArgs);\n          var _queryInfoRef$current = queryInfoRef.current.data;\n          return _await$3(originalQueryFn.apply(void 0, newArgs), function (_originalQueryFn) {\n            var data = [].concat(_queryInfoRef$current, [_originalQueryFn]);\n            queryInfoRef.current.query.canFetchMore = getGetFetchMore()(data[data.length - 1], data);\n            return data;\n          });\n        }, function (_wasThrown, _result) {\n          queryInfoRef.current.query.isFetchingMore = false;\n          return _rethrow(_wasThrown, _result);\n        });\n      })\n    }) : void 0;\n  }, [getGetFetchMore, originalQueryFn, refetch]);\n  var isFetchingMore = React.useMemo(function () {\n    return !!queryInfo.query.isFetchingMore;\n  }, [queryInfo.query.isFetchingMore]);\n  handleSuspense(queryInfo);\n  return _extends({}, queryInfo, {\n    data: data,\n    canFetchMore: canFetchMore,\n    fetchMore: fetchMore,\n    isFetchingMore: isFetchingMore\n  });\n}\n\nexport { ReactQueryConfigProvider, queryCache, setConsole, setFocusHandler, stableStringify, statusError, statusIdle, statusLoading, statusSuccess, useInfiniteQuery, useIsFetching, useMutation, usePaginatedQuery, useQuery };","map":{"version":3,"sources":["../src/utils.js","../src/config.js","../src/queryCache.js","../src/setFocusHandler.js","../src/useIsFetching.js","../src/useMutation.js","../src/useBaseQuery.js","../src/useQuery.js","../src/usePaginatedQuery.js","../src/useInfiniteQuery.js"],"names":["statusIdle","statusLoading","statusError","statusSuccess","_uid","uid","cancelledError","isServer","noop","identity","Console","console","error","warn","log","ref","React","updater","Object","value","JSON","a","Array","deepIncludes","b","document","navigator","isObject","args","queryKey","variables","queryFn","config","mounted","callback","query","configContext","defaultConfigRef","current","retry","retryDelay","Math","staleTime","cacheTime","refetchAllOnWindowFocus","refetchInterval","suspense","queryKeySerializerFn","queryFnParamsFilter","throwOnError","useErrorBoundary","onMutate","onSuccess","onError","onSettled","refetchOnMount","children","configContextValue","newConfig","defaultQueryKeySerializerFn","queryHash","stableStringify","queryCache","makeQueryCache","actionInit","actionFailed","actionMarkStale","actionMarkGC","actionFetch","actionSuccess","actionError","listeners","cache","queries","isFetching","notifyGlobalListeners","acc","d","findQueries","exact","predicate","removeQueries","foundQueries","i","arguments","clearTimeout","Promise","f","then","force","queryVariables","makeQuery","setTimeout","getQueryArgs","reducer","options","noQueryHash","initialData","hasInitialData","isStale","manual","initialStatus","instances","state","type","dispatch","found","instance","onStateUpdate","tryFetchData","promise","isDocumentVisible","delay","functionalUpdate","reject","resolve","__queryFn","cancelled","action","status","canFetchMore","failureCount","markedForGarbageCollection","data","updatedAt","Date","result","body","recover","visibilityChangeEvent","focusEvent","onWindowFocus","isOnline","removePreviousHandler","setFocusHandler","window","setState","getDefaultState","actionReset","actionLoading","actionResolve","actionReject","unsafeDispatch","useMountedCallback","getMutationFn","useGetLatest","getConfig","useConfigContext","latestMutationRef","mutate","mutationId","isLatest","snapshotValue","reset","instanceId","useUid","queryRef","newQuery","useCachedQuery","unsafeRerender","rerender","getLatestConfig","refetch","rest","unsubscribeFromQuery","id","clearInterval","setInterval","useBaseQuery","handleSuspense","lastDataRef","latestData","resolvedData","queryInfoRef","getFetchMore","getGetFetchMore","originalQueryFn","queryInfo","fetchMore","fetchMoreInfo","newArgs","isFetchingMore","finalizer"],"mappings":"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","sourcesContent":["import React from 'react'\n\n//\n\nexport const statusIdle = 'idle'\nexport const statusLoading = 'loading'\nexport const statusError = 'error'\nexport const statusSuccess = 'success'\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport let globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport const noop = () => {}\nexport const identity = d => d\nexport let Console = console || { error: noop, warn: noop, log: noop }\n\nexport function useUid() {\n  const ref = React.useRef(null)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function setConsole(c) {\n  Console = c\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function stableStringifyReplacer(_, value) {\n  return isObject(value)\n    ? Object.assign(\n        {},\n        ...Object.keys(value)\n          .sort()\n          .map(key => ({\n            [key]: value[key],\n          }))\n      )\n    : value\n}\n\nexport function stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer)\n}\n\nexport function isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a, b) {\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return a === b\n}\n\nexport function isDocumentVisible() {\n  return (\n    typeof document === 'undefined' ||\n    document.visibilityState === undefined ||\n    document.visibilityState === 'visible' ||\n    document.visibilityState === 'prerender'\n  )\n}\n\nexport function isOnline() {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (\n      args[0].hasOwnProperty('queryKey') &&\n      args[0].hasOwnProperty('queryFn')\n    ) {\n      const { queryKey, variables = [], queryFn, config = {} } = args[0]\n      return [queryKey, variables, queryFn, config]\n    } else {\n      throw new Error('queryKey and queryFn keys are required.')\n    }\n  }\n  if (typeof args[2] === 'function') {\n    const [queryKey, variables = [], queryFn, config = {}] = args\n    return [queryKey, variables, queryFn, config]\n  }\n\n  const [queryKey, queryFn, config = {}] = args\n\n  return [queryKey, [], queryFn, config]\n}\n\nexport function useMountedCallback(callback) {\n  const mounted = React.useRef(false)\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n  return React.useCallback(\n    (...args) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  )\n}\n\nexport function handleSuspense(query) {\n  if (query.config.suspense || query.config.useErrorBoundary) {\n    if (query.status === statusError) {\n      throw query.error\n    }\n  }\n\n  if (query.config.suspense) {\n    if (query.status === statusLoading) {\n      query.wasSuspensed = true\n      throw query.refetch()\n    }\n  }\n}\n","import React from 'react'\nimport { noop, stableStringify, identity } from './utils'\n\nexport const configContext = React.createContext()\n\nexport const defaultConfigRef = {\n  current: {\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchAllOnWindowFocus: true,\n    refetchInterval: false,\n    suspense: false,\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    queryFnParamsFilter: identity,\n    throwOnError: false,\n    useErrorBoundary: undefined, // this will default to the suspense value\n    onMutate: noop,\n    onSuccess: noop,\n    onError: noop,\n    onSettled: noop,\n    refetchOnMount: true,\n  },\n}\n\nexport function useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current\n}\n\nexport function ReactQueryConfigProvider({ config, children }) {\n  let configContextValue = React.useContext(configContext)\n\n  const newConfig = React.useMemo(() => {\n    const newConfig = {\n      ...(configContextValue || defaultConfigRef.current),\n      ...config,\n    }\n\n    // Default useErrorBoundary to the suspense value\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense\n    }\n\n    return newConfig\n  }, [config, configContextValue])\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n\nexport function defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return []\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey())\n    } catch {\n      return []\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey]\n  }\n\n  const queryHash = stableStringify(queryKey)\n  queryKey = JSON.parse(queryHash)\n\n  return [queryHash, queryKey]\n}\n","import {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  getQueryArgs,\n  deepIncludes,\n  noop,\n} from './utils'\nimport { defaultConfigRef } from './config'\n\nexport const queryCache = makeQueryCache()\n\nconst actionInit = {}\nconst actionFailed = {}\nconst actionMarkStale = {}\nconst actionMarkGC = {}\nconst actionFetch = {}\nconst actionSuccess = {}\nconst actionError = {}\n\nexport function makeQueryCache() {\n  const listeners = []\n\n  const cache = {\n    queries: {},\n    isFetching: 0,\n  }\n\n  const notifyGlobalListeners = () => {\n    cache.isFetching = Object.values(queryCache.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n    listeners.forEach(d => d(cache))\n  }\n\n  cache.subscribe = cb => {\n    listeners.push(cb)\n    return () => {\n      listeners.splice(listeners.indexOf(cb), 1)\n    }\n  }\n\n  cache.clear = () => {\n    cache.queries = {}\n    notifyGlobalListeners()\n  }\n\n  const findQueries = (predicate, { exact } = {}) => {\n    if (typeof predicate !== 'function') {\n      const [\n        queryHash,\n        queryKey,\n      ] = defaultConfigRef.current.queryKeySerializerFn(predicate)\n      predicate = d =>\n        exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(cache.queries).filter(predicate)\n  }\n\n  cache.getQueries = findQueries\n\n  cache.getQuery = queryKey => findQueries(queryKey, { exact: true })[0]\n\n  cache.getQueryData = queryKey => cache.getQuery(queryKey)?.state.data\n\n  cache.removeQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      clearTimeout(query.staleTimeout)\n      delete cache.queries[query.queryHash]\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.refetchQueries = async (\n    predicate,\n    { exact, throwOnError, force } = {}\n  ) => {\n    const foundQueries =\n      predicate === true\n        ? Object.values(cache.queries)\n        : findQueries(predicate, { exact })\n\n    try {\n      return await Promise.all(\n        foundQueries.map(query => query.fetch({ force }))\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  cache._buildQuery = (userQueryKey, queryVariables, queryFn, config) => {\n    let [queryHash, queryKey] = config.queryKeySerializerFn(userQueryKey)\n\n    let query = cache.queries[queryHash]\n\n    if (query) {\n      Object.assign(query, { queryVariables, queryFn })\n      Object.assign(query.config, config)\n    } else {\n      query = makeQuery({\n        queryKey,\n        queryHash,\n        queryVariables,\n        queryFn,\n        config,\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  cache.prefetchQuery = async (...args) => {\n    let [\n      queryKey,\n      queryVariables,\n      queryFn,\n      { force, ...config },\n    ] = getQueryArgs(args)\n\n    config = {\n      ...defaultConfigRef.current,\n      ...config,\n    }\n\n    const query = cache._buildQuery(queryKey, queryVariables, queryFn, config)\n\n    // Don't prefetch queries that are fresh, unless force is passed\n    if (query.state.isStale || force) {\n      // Trigger a fetch and return the promise\n      try {\n        const res = await query.fetch({ force })\n        query.wasPrefetched = true\n        return res\n      } catch (err) {\n        if (config.throwOnError) {\n          throw err\n        }\n      }\n    }\n\n    return query.state.data\n  }\n\n  cache.setQueryData = (queryKey, updater, { exact, ...config } = {}) => {\n    let queries = findQueries(queryKey, { exact })\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [\n        cache._buildQuery(queryKey, undefined, () => new Promise(noop), {\n          ...defaultConfigRef.current,\n          ...config,\n        }),\n      ]\n    }\n\n    queries.forEach(d => d.setData(updater))\n  }\n\n  function makeQuery(options) {\n    const reducer = options.config.queryReducer || defaultQueryReducer\n\n    const noQueryHash = typeof options.queryHash === 'undefined'\n\n    const initialData =\n      typeof options.config.initialData === 'function'\n        ? options.config.initialData()\n        : options.config.initialData\n\n    const hasInitialData = typeof initialData !== 'undefined'\n\n    const isStale = noQueryHash ? true : !hasInitialData\n\n    const manual = options.config.manual\n\n    const initialStatus =\n      noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading\n\n    const query = {\n      ...options,\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus,\n        initialData,\n        hasInitialData,\n        isStale,\n        manual,\n      }),\n    }\n\n    const dispatch = action => {\n      query.state = reducer(query.state, action)\n      query.instances.forEach(d => d.onStateUpdate(query.state))\n      notifyGlobalListeners()\n    }\n\n    query.scheduleStaleTimeout = () => {\n      if (query.config.staleTime === Infinity) {\n        return\n      }\n      query.staleTimeout = setTimeout(() => {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({ type: actionMarkStale })\n        }\n      }, query.config.staleTime)\n    }\n\n    query.scheduleGarbageCollection = () => {\n      dispatch({ type: actionMarkGC })\n      query.cacheTimeout = setTimeout(\n        () => {\n          cache.removeQueries(\n            d =>\n              d.state.markedForGarbageCollection &&\n              d.queryHash === query.queryHash\n          )\n        },\n        typeof query.state.data === 'undefined' &&\n          query.state.status !== 'error'\n          ? 0\n          : query.config.cacheTime\n      )\n    }\n\n    query.heal = () => {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout)\n\n      // Mark the query as not cancelled\n      query.cancelled = null\n    }\n\n    query.subscribe = instance => {\n      let found = query.instances.find(d => d.id === instance.id)\n\n      if (found) {\n        Object.assign(found, instance)\n      } else {\n        found = {\n          onStateUpdate: noop,\n          ...instance,\n        }\n        query.instances.push(instance)\n      }\n\n      query.heal()\n\n      // Return the unsubscribe function\n      return () => {\n        query.instances = query.instances.filter(d => d.id !== instance.id)\n\n        if (!query.instances.length) {\n          // Cancel any side-effects\n          query.cancelled = cancelledError\n\n          if (query.cancelQueries) {\n            query.cancelQueries()\n          }\n\n          // Schedule garbage collection\n          query.scheduleGarbageCollection()\n        }\n      }\n    }\n\n    // Set up the fetch function\n    const tryFetchData = async (queryFn, ...args) => {\n      try {\n        // Perform the query\n        const promise = queryFn(...query.config.queryFnParamsFilter(args))\n\n        query.cancelQueries = () => promise.cancel?.()\n\n        const data = await promise\n\n        delete query.cancelQueries\n        if (query.cancelled) throw query.cancelled\n\n        return data\n      } catch (error) {\n        delete query.cancelQueries\n        if (query.cancelled) throw query.cancelled\n\n        // If we fail, increase the failureCount\n        dispatch({ type: actionFailed })\n\n        // Do we need to retry the request?\n        if (\n          query.config.retry === true ||\n          query.state.failureCount <= query.config.retry ||\n          (typeof query.config.retry === 'function' &&\n            query.config.retry(query.state.failureCount, error))\n        ) {\n          // Only retry if the document is visible\n          if (!isDocumentVisible()) {\n            // set this flag to continue fetch retries on focus\n            query.shouldContinueRetryOnFocus = true\n            return new Promise(noop)\n          }\n\n          delete query.shouldContinueRetryOnFocus\n\n          // Determine the retryDelay\n          const delay = functionalUpdate(\n            query.config.retryDelay,\n            query.state.failureCount\n          )\n\n          // Return a new promise with the retry\n          return await new Promise((resolve, reject) => {\n            // Keep track of the retry timeout\n            setTimeout(async () => {\n              if (query.cancelled) return reject(query.cancelled)\n\n              try {\n                const data = await tryFetchData(queryFn, ...args)\n                if (query.cancelled) return reject(query.cancelled)\n                resolve(data)\n              } catch (error) {\n                if (query.cancelled) return reject(query.cancelled)\n                reject(error)\n              }\n            }, delay)\n          })\n        }\n\n        throw error\n      }\n    }\n\n    query.fetch = async ({ force, __queryFn = query.queryFn } = {}) => {\n      // Don't refetch fresh queries that don't have a queryHash\n\n      if (!query.queryHash || (!query.state.isStale && !force)) {\n        return\n      }\n\n      // Create a new promise for the query cache if necessary\n      if (!query.promise) {\n        query.promise = (async () => {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null\n\n          try {\n            // Set up the query refreshing state\n            dispatch({ type: actionFetch })\n\n            // Try to fetch\n            let data = await tryFetchData(\n              __queryFn,\n              ...query.queryKey,\n              ...query.queryVariables\n            )\n\n            query.setData(data)\n\n            query.instances.forEach(\n              instance =>\n                instance.onSuccess && instance.onSuccess(query.state.data)\n            )\n\n            query.instances.forEach(\n              instance =>\n                instance.onSettled && instance.onSettled(query.state.data, null)\n            )\n\n            delete query.promise\n\n            return data\n          } catch (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error,\n            })\n\n            delete query.promise\n\n            if (error !== query.cancelled) {\n              query.instances.forEach(\n                instance => instance.onError && instance.onError(error)\n              )\n\n              query.instances.forEach(\n                instance =>\n                  instance.onSettled && instance.onSettled(undefined, error)\n              )\n\n              throw error\n            }\n          }\n        })()\n      }\n\n      return query.promise\n    }\n\n    query.setData = updater => {\n      // Set data and mark it as cached\n      dispatch({ type: actionSuccess, updater })\n\n      // Schedule a fresh invalidation!\n      clearTimeout(query.staleTimeout)\n      query.scheduleStaleTimeout()\n    }\n\n    return query\n  }\n\n  return cache\n}\n\nexport function defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching: action.hasInitialData ? false : !action.manual,\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0,\n      }\n    case actionFailed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case actionMarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case actionMarkGC: {\n      return {\n        ...state,\n        markedForGarbageCollection: true,\n      }\n    }\n    case actionFetch:\n      return {\n        ...state,\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0,\n      }\n    case actionSuccess:\n      return {\n        ...state,\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case actionError:\n      return {\n        ...state,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          status: statusError,\n          error: action.error,\n        }),\n      }\n    default:\n      throw new Error()\n  }\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { defaultConfigRef } from './config'\nimport { queryCache } from './queryCache'\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus = () => {\n  const { refetchAllOnWindowFocus } = defaultConfigRef.current\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCache\n      .refetchQueries(query => {\n        if (!query.instances.length) {\n          return false\n        }\n\n        if (query.config.manual === true) {\n          return false\n        }\n\n        if (query.shouldContinueRetryOnFocus) {\n          // delete promise, so `fetch` will create new one\n          delete query.promise\n          return true\n        }\n\n        if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n          return refetchAllOnWindowFocus\n        } else {\n          return query.config.refetchOnWindowFocus\n        }\n      })\n      .catch(Console.error)\n  }\n}\n\nlet removePreviousHandler\n\nexport function setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler(handleFocus => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n})\n","import React from 'react'\n\nimport { queryCache } from './queryCache'\n\nexport function useIsFetching() {\n  const [state, setState] = React.useState({})\n\n  React.useEffect(() => {\n    return queryCache.subscribe(() => setState({}))\n  }, [])\n\n  return React.useMemo(() => state && queryCache.isFetching, [state])\n}\n","import React from 'react'\n\n//\n\nimport { useConfigContext } from './config'\nimport {\n  statusIdle,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  useGetLatest,\n  Console,\n  uid,\n  useMountedCallback,\n  noop,\n} from './utils'\n\nconst getDefaultState = () => ({\n  status: statusIdle,\n  data: undefined,\n  error: null,\n})\n\nconst actionReset = {}\nconst actionLoading = {}\nconst actionResolve = {}\nconst actionReject = {}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState()\n  }\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading,\n    }\n  }\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data,\n    }\n  }\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error,\n    }\n  }\n  throw new Error()\n}\n\nexport function useMutation(mutationFn, config = {}) {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const getConfig = useGetLatest({\n    ...useConfigContext(),\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef()\n\n  const mutate = React.useCallback(\n    async (\n      variables,\n      { onSuccess = noop, onError = noop, onSettled = noop, throwOnError } = {}\n    ) => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = async () => latestMutationRef.current === mutationId\n\n      dispatch({ type: actionLoading })\n\n      let snapshotValue\n\n      try {\n        snapshotValue = await config.onMutate(variables)\n\n        let data\n\n        if (isLatest()) {\n          data = await getMutationFn()(variables)\n        }\n\n        if (isLatest()) {\n          await onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionResolve, data })\n        }\n\n        return data\n      } catch (error) {\n        if (isLatest()) {\n          Console.error(error)\n          await onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionReject, error })\n\n          if (throwOnError ?? config.throwOnError) {\n            throw error\n          }\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => dispatch({ type: actionReset }), [\n    dispatch,\n  ])\n\n  React.useEffect(() => {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\n//\n\nimport { queryCache } from './queryCache'\nimport { useConfigContext } from './config'\nimport {\n  useUid,\n  isDocumentVisible,\n  Console,\n  useGetLatest,\n  useMountedCallback,\n} from './utils'\n\nexport function useBaseQuery(queryKey, queryVariables, queryFn, config = {}) {\n  const instanceId = useUid()\n\n  config = {\n    ...useConfigContext(),\n    ...config,\n  }\n\n  const queryRef = React.useRef()\n\n  const newQuery = queryCache._buildQuery(\n    queryKey,\n    queryVariables,\n    queryFn,\n    config\n  )\n\n  const useCachedQuery =\n    queryRef.current &&\n    typeof queryRef.current.queryHash === 'undefined' &&\n    typeof newQuery.queryHash === 'undefined'\n\n  // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n  if (!useCachedQuery) {\n    queryRef.current = newQuery\n  }\n\n  const query = queryRef.current\n\n  const [, unsafeRerender] = React.useState()\n\n  const rerender = useMountedCallback(unsafeRerender)\n\n  const getLatestConfig = useGetLatest(config)\n  const refetch = React.useCallback(\n    async ({ throwOnError, ...rest } = {}) => {\n      try {\n        return await query.fetch(rest)\n      } catch (err) {\n        if (throwOnError) {\n          throw err\n        }\n      }\n    },\n    [query]\n  )\n\n  // Subscribe to the query and maybe trigger fetch\n  React.useEffect(() => {\n    const unsubscribeFromQuery = query.subscribe({\n      id: instanceId,\n      onStateUpdate: () => rerender({}),\n      onSuccess: data => getLatestConfig().onSuccess(data),\n      onError: err => getLatestConfig().onError(err),\n      onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n    })\n\n    // Perform the initial fetch for this query if necessary\n    if (\n      !getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n      !query.wasPrefetched && // Don't double fetch for prefetched queries\n      !query.wasSuspensed && // Don't double fetch for suspense\n      query.state.isStale && // Only refetch if stale\n      (getLatestConfig().refetchOnMount || query.instances.length === 1)\n    ) {\n      refetch().catch(Console.error)\n    }\n\n    query.wasPrefetched = false\n    query.wasSuspensed = false\n\n    return unsubscribeFromQuery\n  }, [getLatestConfig, instanceId, query, refetch, rerender])\n\n  // Handle refetch interval\n  React.useEffect(() => {\n    if (\n      config.refetchInterval &&\n      (!query.refetchInterval || config.refetchInterval < query.refetchInterval)\n    ) {\n      clearInterval(query.refetchInterval)\n      query.refetchInterval = setInterval(() => {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error)\n        }\n      }, config.refetchInterval)\n\n      return () => {\n        clearInterval(query.refetchInterval)\n        delete query.refetchInterval\n      }\n    }\n  }, [\n    config.refetchInterval,\n    config.refetchIntervalInBackground,\n    query.refetchInterval,\n    refetch,\n  ])\n\n  return {\n    ...query.state,\n    config,\n    query,\n    refetch,\n  }\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function useQuery(...args) {\n  const query = useBaseQuery(...getQueryArgs(args))\n\n  handleSuspense(query)\n\n  return query\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function usePaginatedQuery(...args) {\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const lastDataRef = React.useRef()\n\n  // If latestData is set, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  const query = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  let { data: latestData, status } = query\n\n  React.useEffect(() => {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  let resolvedData = latestData\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success'\n  }\n\n  handleSuspense(query)\n\n  return {\n    ...query,\n    resolvedData,\n    latestData,\n    status,\n  }\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, useGetLatest, handleSuspense } from './utils'\n\nexport function useInfiniteQuery(...args) {\n  const queryInfoRef = React.useRef()\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const { getFetchMore } = config\n  const getGetFetchMore = useGetLatest(getFetchMore)\n\n  // The default queryFn will query all pages and map them together\n  const originalQueryFn = queryFn\n\n  queryFn = async () => {\n    const data = await Promise.all(\n      queryInfoRef.current.query.pageVariables.map(args =>\n        originalQueryFn(...args)\n      )\n    )\n    queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n      data[data.length - 1],\n      data\n    )\n    return data\n  }\n\n  const queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  if (\n    typeof queryInfo.query.canFetchMore === 'undefined' &&\n    typeof queryInfo.data !== 'undefined'\n  ) {\n    queryInfo.query.canFetchMore = getGetFetchMore()(\n      queryInfo.data[queryInfo.data.length - 1],\n      queryInfo.data\n    )\n  }\n\n  queryInfoRef.current = queryInfo\n\n  let {\n    refetch,\n    data = [],\n    query: { canFetchMore },\n  } = queryInfo\n\n  // Here we seed the pageVariabes for the query\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [\n      [...queryInfo.query.queryKey, ...queryInfo.query.queryVariables],\n    ]\n  }\n\n  const fetchMore = React.useCallback(\n    (fetchMoreInfo = queryInfoRef.current.query.canFetchMore) =>\n      queryInfoRef.current.query.canFetchMore\n        ? refetch({\n            force: true,\n            __queryFn: async (...args) => {\n              try {\n                queryInfoRef.current.query.isFetchingMore = true\n                const newArgs = [...args, fetchMoreInfo]\n                queryInfoRef.current.query.pageVariables.push(newArgs)\n                const data = [\n                  ...queryInfoRef.current.data,\n                  await originalQueryFn(...newArgs),\n                ]\n                queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n                  data[data.length - 1],\n                  data\n                )\n                return data\n              } finally {\n                queryInfoRef.current.query.isFetchingMore = false\n              }\n            },\n          })\n        : void 0,\n    [getGetFetchMore, originalQueryFn, refetch]\n  )\n\n  const isFetchingMore = React.useMemo(() => {\n    return !!queryInfo.query.isFetchingMore\n  }, [queryInfo.query.isFetchingMore])\n\n  handleSuspense(queryInfo)\n\n  return {\n    ...queryInfo,\n    data,\n    canFetchMore,\n    fetchMore,\n    isFetchingMore,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}